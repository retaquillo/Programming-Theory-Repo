{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww18100\viewh13300\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs28 \cf0 \

\f1\b\fs36 \ul Unity\'92s Ecosystem
\f0\b0\fs28 \ulnone \
\
In this project there will be several people playing different roles in the development of a Unity project (what we have called the \'91Unity\'92s Ecosystem\'92).\
\
1. Inheritance:\
\
All the people will derive their behaviors from a base class called Person. Each Person will have some attributes (name, age, etc) regardless of the role played in the Unity project.\
\
From this base class we can derive some more specific classes:\
\
	- Programmer\
	- Tester\
	- GraphArtist\
	- AudioArtist\
	- ProjectManager\
\
2. Polymorphism:\
\
Every person can IntroduceYourself(), but depending on his role the answer will be different.\
\
Every person in the project team will Work(), but the output will be different depending on the role.\
\
3. Encapsulation:\
\
We will use getters and setters, specially to set the age of the people to avoid been accused of using child labor.\
\
The variables will be set to private as far as possible.\
\
4. Abstraction:\
\
Every Person will:\
\
	- IntroduceYourSelf()\
\
Every TeamMember will:\
\
	- IntroduceYourSelf()\
	- Work()\
\
\
}